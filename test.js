const _ = require('lodash')
const cssMatcher = require('jest-matcher-css')
const postcss = require('postcss')
const tailwindcss = require('tailwindcss')

/**
 * generatePluginCss
 * Handles generating base tailwind css
 * @param {*} config
 * @param {object} pluginOptions are the options passed to the plugin
 * @return
 */
const generatePluginCss = (config, pluginOptions = {}) => {
  return postcss(
    tailwindcss(
      _.merge(
        {
          theme: {
            width: {},
            height: {},
          },
          variants: [],
          corePlugins: ['width', 'height', 'margin', 'padding'],
          plugins: [require('./index.js')(pluginOptions)],
        },
        config
      )
    )
  )
    .process('@tailwind components; @tailwind utilities', {
      from: undefined,
    })
    .then((result) => {
      // console.log('results', result.css)
      return result.css
    })
}

/**
 * Base display classes from TailwindCSS
 * Note: I can't figure out how to get around these. If display
 *       is not added above to corePlugins, nothing shows up
 */

expect.extend({
  toMatchCss: cssMatcher,
})

test('Nine hundred widths are generated by default', () => {
  return generatePluginCss(null, {}).then((css) => {
    expect(css).toMatch(/(w-900px)/)
  })
})

test('Nine hundred heights are generated by default', () => {
  return generatePluginCss(null, {}).then((css) => {
    expect(css).toMatch(/(h-900px)/)
  })
})

test('Margin is working', () => {
  return generatePluginCss(null, {}).then((css) => {
    expect(css).toMatch(/(m-20px)/)
  })
})

test('Margin top is working', () => {
  return generatePluginCss(null, {}).then((css) => {
    expect(css).toMatch(/(mt-20px)/)
  })
})

test('Padding is working', () => {
  return generatePluginCss(null, {}).then((css) => {
    expect(css).toMatch(/(p-20px)/)
  })
})

test('Padding top is working', () => {
  return generatePluginCss(null, {}).then((css) => {
    expect(css).toMatch(/(pt-20px)/)
  })
})

// Note: If the results contain a backslash, add another to escape it.
test('A single width and height can be added', () => {
  return generatePluginCss(
    {},
    {
      width: {
        total: 1,
      },
      height: {
        total: 1,
      },
    }
  ).then((css) => {
    expect(css).toMatchCss(`
      .w-0px {
        width: 0;
      }

      .w-1px {
        width: 1px;
      }

      .h-0px {
        height: 0;
      }

      .h-1px {
        height: 1px;
      }
    `)
  })
})

test('Multiple widths and heights can be added', () => {
  return generatePluginCss(
    {},
    {
      width: {
        total: 10,
      },
      height: {
        total: 10,
      },
    }
  ).then((css) => {
    expect(css).toMatchCss(`
      .w-0px {
        width: 0;
      }

      .w-1px {
        width: 1px;
      }

      .w-2px {
        width: 2px;
      }

      .w-3px {
        width: 3px;
      }

      .w-4px {
        width: 4px;
      }

      .w-5px {
        width: 5px;
      }

      .w-6px {
        width: 6px;
      }

      .w-7px {
        width: 7px;
      }

      .w-8px {
        width: 8px;
      }

      .w-9px {
        width: 9px;
      }

      .w-10px {
        width: 10px;
      }

      .h-0px {
        height: 0;
      }

      .h-1px {
        height: 1px;
      }

      .h-2px {
        height: 2px;
      }

      .h-3px {
        height: 3px;
      }

      .h-4px {
        height: 4px;
      }

      .h-5px {
        height: 5px;
      }

      .h-6px {
        height: 6px;
      }

      .h-7px {
        height: 7px;
      }

      .h-8px {
        height: 8px;
      }

      .h-9px {
        height: 9px;
      }

      .h-10px {
        height: 10px;
      }
    `)
  })
})
